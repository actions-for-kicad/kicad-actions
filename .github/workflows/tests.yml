name: Tests

on:
  push:
    branches:
      - main
    paths-ignore:
      - "LICENSE"
      - "*.md"
  pull_request:
    paths-ignore:
      - "LICENSE"
      - "*.md"

jobs:
  test-no-arguments:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Run KiCad actions
        uses: ./

  test-no-schematic-file:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Run KiCad actions
        id: kicad_actions
        uses: ./
        with:
          schematic_output_pdf: true
        continue-on-error: true

      - name: Verify file check result
        run: |
          if [[ "${{ steps.kicad_actions.outcome }}" != "failure" ]]; then
            echo "::error::Expected failure, but step succeeded!"
            exit 1
          fi
        shell: bash

  test-no-pcb-file:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Run KiCad actions
        id: kicad_actions
        uses: ./
        with:
          pcb_output_drill: true
        continue-on-error: true

      - name: Verify file check result
        run: |
          if [[ "${{ steps.kicad_actions.outcome }}" != "failure" ]]; then
            echo "::error::Expected failure, but step succeeded!"
            exit 1
          fi
        shell: bash

  test-erc-drc:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        test_name: [
            "erc-failure",
            "erc-failure-no-lib",
            "erc-success",
            # "drc-failure",
            # "drc-success",
          ]
        include:
          - test_name: erc-failure
            erc: true
            drc: false
            schematic_file_name: tests/kicad-project-failure/kicad-project.kicad_sch
            pcb_file_name: null
            result: failure
            expected_file: erc.rpt
          - test_name: erc-failure-no-lib
            erc: true
            drc: false
            schematic_file_name: tests/kicad-project-success/kicad-project.kicad_sch
            pcb_file_name: null
            result: success
            expected_file: erc.rpt
          - test_name: erc-success
            symbol_libraries: "test-sym-library=./test-sym-library.kicad_sym"
            erc: true
            drc: false
            schematic_file_name: tests/kicad-project-success/kicad-project.kicad_sch
            pcb_file_name: null
            result: success
            expected_file: erc.rpt
          # - test_name: drc-failure
          #   erc: false
          #   drc: true
          #   schematic_file_name: null
          #   pcb_file_name: tests/kicad-project-failure/kicad-project.kicad_pcb
          #   result: failure
          #   expected_file: drc.rpt
          # - test_name: drc-success
          #   erc: false
          #   drc: true
          #   schematic_file_name: null
          #   pcb_file_name: tests/kicad-project-success/kicad-project.kicad_pcb
          #   result: success
          #   expected_file: drc.rpt
    steps:
      - uses: actions/checkout@v4
      - name: Run ERC/DRC check
        id: check
        uses: ./
        with:
          run_erc: ${{ matrix.erc }}
          run_drc: ${{ matrix.drc }}
          schematic_file_name: ${{ matrix.schematic_file_name }}
          pcb_file_name: ${{ matrix.pcb_file_name }}
          symbol_libraries: ${{ matrix.symbol_libraries || null }}
        continue-on-error: true
      - name: Verify ERC/DRC step result
        run: |
          cat "${{ matrix.expected_file }}"
          cat "$HOME/.config/kicad/9.0/sym-lib-table"
          if [[ "${{ matrix.result }}" == "failure" && "${{ steps.check.outcome }}" != "failure" ]]; then
            echo "::error::Expected failure, but step succeeded!"
            exit 1
          fi
          if [[ "${{ matrix.result }}" == "success" && "${{ steps.check.outcome }}" == "failure" ]]; then
            echo "::error::Expected success, but step failed!"
            exit 1
          fi
        shell: bash
      - name: Verify output file
        run: |
          if [[ ! -f "${{ matrix.expected_file }}" ]]; then
            echo "::error::Expected output file '${{ matrix.expected_file }}' not found!"
            exit 1
          fi
        shell: bash

  # test-schematic-outputs:
  #   runs-on: ubuntu-latest
  #   strategy:
  #     fail-fast: false
  #     matrix:
  #       test_name:
  #         [
  #           "pdf",
  #           "pdf-black-white",
  #           "svg",
  #           "svg-black-white",
  #           "dxf",
  #           "dxf-black-white",
  #           "hpgl",
  #           "ps",
  #           "ps-black-white",
  #           "bom",
  #           "bom-custom",
  #           "netlist",
  #         ]
  #       include:
  #         - test_name: pdf
  #           output_flag: schematic_output_pdf
  #           expected_file: schematic.pdf
  #         - test_name: pdf-black-white
  #           output_flag: schematic_output_pdf
  #           expected_file: schematic.pdf
  #           schematic_output_black_white: true
  #         - test_name: svg
  #           output_flag: schematic_output_svg
  #           expected_file: schematics/kicad-project.svg
  #         - test_name: svg-black-white
  #           output_flag: schematic_output_svg
  #           expected_file: schematics/kicad-project.svg
  #           schematic_output_black_white: true
  #         - test_name: dxf
  #           output_flag: schematic_output_dxf
  #           expected_file: schematics/kicad-project.dxf
  #         - test_name: dxf-black-white
  #           output_flag: schematic_output_dxf
  #           expected_file: schematics/kicad-project.dxf
  #           schematic_output_black_white: true
  #         - test_name: hpgl
  #           output_flag: schematic_output_hpgl
  #           expected_file: schematics/kicad-project.plt
  #         - test_name: ps
  #           output_flag: schematic_output_ps
  #           expected_file: schematics/kicad-project.ps
  #         - test_name: ps-black-white
  #           output_flag: schematic_output_ps
  #           expected_file: schematics/kicad-project.ps
  #           schematic_output_black_white: true
  #         - test_name: bom
  #           output_flag: schematic_output_bom
  #           expected_file: bom.csv
  #         - test_name: bom-custom
  #           output_flag: schematic_output_bom
  #           expected_file: bom.csv
  #           schematic_output_bom_fields: "Reference,Value,Footprint"
  #         - test_name: netlist
  #           output_flag: schematic_output_netlist
  #           expected_file: netlist.net
  #   steps:
  #     - name: Checkout Repository
  #       uses: actions/checkout@v4

  #     - name: Run schematic output generation
  #       id: generate_output
  #       uses: ./
  #       with:
  #         schematic_file_name: tests/kicad-project-success/kicad-project.kicad_sch
  #         ${{ matrix.output_flag }}: true
  #         schematic_output_black_white: ${{ matrix.schematic_output_black_white || false }}
  #         schematic_output_bom_fields: ${{ matrix.schematic_output_bom_fields || 'Reference,Value,Footprint,${QUANTITY},${DNP}' }}

  #     - name: Verify output file
  #       run: |
  #         if [[ ! -f "${{ matrix.expected_file }}" ]]; then
  #           echo "::error::Expected output file '${{ matrix.expected_file }}' not found!"
  #           exit 1
  #         fi
  #       shell: bash

  # test-pcb-outputs:
  #   runs-on: ubuntu-latest
  #   strategy:
  #     fail-fast: false
  #     matrix:
  #       test_name:
  #         [
  #           "drill-excellon",
  #           "drill-gerber",
  #           "gerbers-folder",
  #           "gerbers-zip",
  #           "gerbers-drill-folder",
  #           "gerbers-drill-zip",
  #           "dxf",
  #           "pdf",
  #           "pdf-black-white",
  #           "svg",
  #           "svg-black-white",
  #           "pos-ascii",
  #           "pos-gerber",
  #           "ipc2581",
  #           "step",
  #         ]
  #       include:
  #         - test_name: drill-excellon
  #           output_flag: pcb_output_drill
  #           expected_files: drill/kicad-project.drl
  #         - test_name: drill-gerber
  #           output_flag: pcb_output_drill
  #           expected_files: |
  #             "drill/kicad-project-PTH-drl.gbr"
  #             "drill/kicad-project-NPTH-drl.gbr"
  #           pcb_output_drill_format: gerber
  #         - test_name: gerbers-folder
  #           output_flag: pcb_output_gerbers
  #           pcb_output_layers: F.Cu,F.Mask,F.SilkS
  #           expected_files: |
  #             "gerbers/kicad-project-F_Cu.gtl"
  #             "gerbers/kicad-project-F_Mask.gts"
  #             "gerbers/kicad-project-F_Silkscreen.gto"
  #         - test_name: gerbers-zip
  #           output_flag: pcb_output_gerbers
  #           expected_files: gerbers.zip
  #           pcb_output_gerbers_format: zip
  #         - test_name: gerbers-drill-folder
  #           output_flag: pcb_output_gerbers_and_drill
  #           pcb_output_layers: F.Cu,F.Mask,F.SilkS
  #           expected_files: |
  #             "gerbers/kicad-project-F_Cu.gtl"
  #             "gerbers/kicad-project-F_Mask.gts"
  #             "gerbers/kicad-project-F_Silkscreen.gto"
  #             "gerbers/kicad-project.drl"
  #         - test_name: gerbers-drill-zip
  #           output_flag: pcb_output_gerbers_and_drill
  #           expected_files: gerbers.zip
  #           pcb_output_gerbers_and_drill_format: zip
  #         - test_name: dxf
  #           output_flag: pcb_output_dxf
  #           pcb_output_layers: F.Cu,F.Mask,F.SilkS
  #           expected_files: |
  #             "dxf/kicad-project-F_Cu.dxf"
  #             "dxf/kicad-project-F_Mask.dxf"
  #             "dxf/kicad-project-F_Silkscreen.dxf"
  #         - test_name: pdf
  #           output_flag: pcb_output_pdf
  #           pcb_output_layers: F.Cu,F.Mask,F.SilkS
  #           expected_files: pcb.pdf
  #         - test_name: pdf-black-white
  #           output_flag: pcb_output_pdf
  #           pcb_output_layers: F.Cu
  #           expected_files: pcb.pdf
  #           pcb_output_black_white: true
  #         - test_name: svg
  #           output_flag: pcb_output_svg
  #           pcb_output_layers: F.Cu,F.Mask,F.SilkS
  #           expected_files: pcb.svg
  #         - test_name: svg-black-white
  #           output_flag: pcb_output_svg
  #           pcb_output_layers: F.Cu
  #           expected_files: pcb.svg
  #           pcb_output_black_white: true
  #         - test_name: pos-ascii
  #           output_flag: pcb_output_pos
  #           expected_files: pcb.pos
  #         - test_name: pos-gerber
  #           output_flag: pcb_output_pos
  #           expected_files: pcb.pos
  #           pcb_output_pos_format: gerber
  #           pcb_output_pos_side: front
  #         - test_name: ipc2581
  #           output_flag: pcb_output_ipc2581
  #           expected_files: pcb.xml
  #         - test_name: step
  #           output_flag: pcb_output_step
  #           expected_files: pcb.step

  #   steps:
  #     - name: Checkout Repository
  #       uses: actions/checkout@v4

  #     - name: Run schematic output generation
  #       id: generate_output
  #       uses: ./
  #       with:
  #         pcb_file_name: tests/kicad-project-success/kicad-project.kicad_pcb
  #         ${{ matrix.output_flag }}: true
  #         pcb_output_drill_format: ${{ matrix.pcb_output_drill_format || 'excellon' }}
  #         pcb_output_gerbers_format: ${{ matrix.pcb_output_gerbers_format || 'folder' }}
  #         pcb_output_gerbers_and_drill_format: ${{ matrix.pcb_output_gerbers_and_drill_format || 'folder' }}
  #         pcb_output_layers: ${{ matrix.pcb_output_layers || null }}
  #         pcb_output_black_white: ${{ matrix.pcb_output_black_white || false }}
  #         pcb_output_pos_format: ${{ matrix.pcb_output_pos_format || 'ascii' }}
  #         pcb_output_pos_side: ${{ matrix.pcb_output_pos_side || 'both' }}

  #     - name: Verify output files
  #       run: |
  #         echo "${{ matrix.expected_files }}" | while IFS= read -r file; do
  #           if [[ -n "$file" && ! -f "$file" ]]; then
  #             echo "::error::Expected output file '$file' not found!"
  #             exit 1
  #           fi
  #         done
  #       shell: bash

  # test-full-readme:
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Checkout Repository
  #       uses: actions/checkout@v4

  #     - name: Run KiCad actions
  #       uses: ./
  #       with:
  #         schematic_file_name: tests/kicad-project-success/kicad-project.kicad_sch
  #         run_erc: true
  #         schematic_output_pdf: true

  #         pcb_file_name: tests/kicad-project-success/kicad-project.kicad_pcb
  #         run_drc: true
  #         pcb_output_gerbers_and_drill: true
  #         pcb_output_gerbers_and_drill_format: zip

  #     - name: Upload schematic
  #       uses: actions/upload-artifact@v4
  #       with:
  #         name: schematic.pdf
  #         path: ./schematic.pdf

  #     - name: Upload gerbers and drill file
  #       uses: actions/upload-artifact@v4
  #       with:
  #         name: gerbers.zip
  #         path: ./gerbers.zip

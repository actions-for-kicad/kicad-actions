name: Check for new KiCad versions

on:
  schedule:
    - cron: "0 0 * * *"
  workflow_dispatch:

jobs:
  check-kicad-versions:
    runs-on: ubuntu-latest

    steps:
      - name: Set up Git
        run: |
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"

      - name: Get GitHub app token
        uses: actions/create-github-app-token@v2
        id: app-token
        with:
          app-id: ${{ vars.APP_ID }}
          private-key: ${{ secrets.PRIVATE_KEY }}
          owner: ${{ github.repository_owner }}
          repositories: |
            ${{ github.event.repository.name }}

      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.x"

      - name: Fetch KiCad versions
        id: fetch_versions
        run: |
          pip install requests packaging
          python <<EOF
          import requests
          import re
          import os
          from packaging.version import Version, InvalidVersion

          url = 'https://hub.docker.com/v2/repositories/kicad/kicad/tags?page_size=100'
          response = requests.get(url).json()
          tags = [tag['name'] for tag in response['results']]

          def is_valid(tag):
              # Match major, major.minor, or major.minor.patch
              if not re.fullmatch(r'\d+(\.\d+){0,2}', tag):
                  return False
              try:
                  version = Version(tag if '.' in tag else f"{tag}.0.0")
                  return version.major >= 8
              except InvalidVersion:
                  return False

          valid_versions = sorted(
              filter(is_valid, tags),
              key=lambda v: Version(v if '.' in v else f"{v}.0.0")
          )

          print(f"Detected valid versions: {valid_versions}")

          with open("versions.txt", "w") as f:
              for v in valid_versions:
                  f.write(v + "\n")
          EOF

      - name: Compare and filter missing versions
        id: check_missing
        run: |
          existing_versions=$(grep -oP '"\K\d+\.\d+\.\d+(?=")' .github/workflows/build-kicad-versions.yml | sort)
          missing_versions=()

          while read -r version; do
            if ! grep -q "\"$version\"" .github/workflows/build-kicad-versions.yml; then
              missing_versions+=("$version")
            fi
          done < versions.txt

          if [ ${#missing_versions[@]} -eq 0 ]; then
            echo "No new versions to add"
            echo "update_needed=false" >> $GITHUB_OUTPUT
          else
            echo "New versions to add: ${missing_versions[*]}"
            echo "update_needed=true" >> $GITHUB_OUTPUT
            echo "${missing_versions[@]}" > new_versions.txt
          fi

      #   - name: Create branch and pull request
      #     if: steps.check_missing.outputs.update_needed == 'true'
      #     run: |
      #       git config --global user.name "${{ github.actor }}"
      #       git config --global user.email "${{ github.actor }}@users.noreply.github.com"
      #       BRANCH_NAME="add-kicad-versions-$(date +%s)"
      #       git checkout -b "$BRANCH_NAME"

      #       for version in $(cat new_versions.txt); do
      #         sed -i "/kicad_version:/,/]/ s/]/, \"${version}\"]/" .github/workflows/build-kicad-versions.yml
      #       done

      #       git add .github/workflows/build-kicad-versions.yml
      #       git commit -m "Add new KiCad versions to matrix"
      #       git push origin "$BRANCH_NAME"

      #       gh pr create \
      #         --title "Add new KiCad versions to matrix" \
      #         --body "Automatically add the following KiCad versions: $(cat new_versions.txt | tr '\n' ' ')" \
      #         --base main \
      #         --head "$BRANCH_NAME" \
      #         --reviewer Nick-v-L

      #   - name: Set up GitHub App authentication
      #     run: |
      #       git remote set-url origin https://x-access-token:${{ steps.app-token.outputs.token }}@github.com/${{ github.repository }}.git

      #   - name: Create branch and pull request
      #     if: steps.check_missing.outputs.update_needed == 'true'
      #     run: |
      #       BRANCH_NAME="add-kicad-versions-$(date +%s)"
      #       git checkout -b "$BRANCH_NAME"

      #       for version in $(cat new_versions.txt); do
      #       sed -i "/kicad_version:/,/]/ s/]/, \"${version}\"]/" .github/workflows/build-kicad-versions.yml
      #       done

      #       git add .github/workflows/build-kicad-versions.yml
      #       git commit -m "Add new KiCad versions to matrix"

      #       echo "This works"

      #       # Push using GitHub App token over HTTPS
      #       git push origin "$BRANCH_NAME"

      #       echo "This does not work"

      #       # Optional: Use REST API instead of gh pr create if it fails
      #       gh pr create \
      #       --title "Add new KiCad versions to matrix" \
      #       --body "Automatically add the following KiCad versions: $(cat new_versions.txt | tr '\n' ' ')" \
      #       --base main \
      #       --head "$BRANCH_NAME" \
      #       --reviewer Nick-v-L

      - name: Create branch and pull request
        if: steps.check_missing.outputs.update_needed == 'true'
        run: |
          BRANCH_NAME="add-kicad-versions-$(date +%s)"
          BASE_BRANCH="main"
          REPO_OWNER="${{ github.repository_owner }}"
          REPO_NAME="${{ github.event.repository.name }}"
          API_URL="https://api.github.com/repos/${REPO_OWNER}/${REPO_NAME}"

          # 1. Create the branch by referencing the base branch (main)
          SHA=$(curl -s -H "Authorization: Bearer ${{ steps.app-token.outputs.token }}" \
              -H "Accept: application/vnd.github+json" \
              -H "X-GitHub-Api-Version: 2022-11-28" \
              "https://api.github.com/repos/${REPO_OWNER}/${REPO_NAME}/git/refs/heads/${BASE_BRANCH}" | jq -r '.object.sha')

          curl -s -X POST -H "Authorization: Bearer ${{ steps.app-token.outputs.token }}" \
              -H "Accept: application/vnd.github+json" \
              -H "X-GitHub-Api-Version: 2022-11-28" \
              "${API_URL}/git/refs" \
              -d "{\"ref\": \"refs/heads/${BRANCH_NAME}\", \"sha\": \"${SHA}\"}"

          # 2. Modify the workflow file using the API
          # First, read the file content
          FILE_PATH=".github/workflows/build-kicad-versions.yml"
          FILE_CONTENT=$(curl -s -H "Authorization: Bearer ${{ steps.app-token.outputs.token }}" \
              -H "Accept: application/vnd.github+json" \
              -H "X-GitHub-Api-Version: 2022-11-28" \
              "${API_URL}/contents/${FILE_PATH}" | jq -r '.content' | base64 --decode)

          # Modify the content of the file (e.g., adding the new versions)
          for version in $(cat new_versions.txt); do
          FILE_CONTENT=$(echo "$FILE_CONTENT" | sed "/kicad_version:/,/]/ s/]/, \"${version}\"]/")
          done

          # Base64 encode the modified file content
          MODIFIED_CONTENT=$(echo -n "$FILE_CONTENT" | base64)

          # Commit the change by updating the file content through the API
          curl -X PUT -H "Authorization: Bearer ${{ steps.app-token.outputs.token }}" \
              -H "Accept: application/vnd.github+json" \
              -H "X-GitHub-Api-Version: 2022-11-28" \
              "${API_URL}/contents/${FILE_PATH}" \
              -d "{\"message\":\"Add new KiCad versions to matrix\",\"committer\":{\"name\":\"GitHub Actions\",\"email\":\"actions@github.com\"},\"content\":\"${MODIFIED_CONTENT}\",\"branch\":\"${BRANCH_NAME}\"}"

          # 3. Create a pull request using the GitHub API
          PR_TITLE="Add new KiCad versions to matrix"
          PR_BODY="Automatically add the following KiCad versions: $(cat new_versions.txt | tr '\n' ' ')"

          curl -X POST -H "Authorization: Bearer ${{ steps.app-token.outputs.token }}" \
              -H "Accept: application/vnd.github+json" \
              -H "X-GitHub-Api-Version: 2022-11-28" \
              "${API_URL}/pulls" \
              -d "{\"title\":\"${PR_TITLE}\", \"body\":\"${PR_BODY}\", \"head\":\"${BRANCH_NAME}\", \"base\":\"${BASE_BRANCH}\", \"reviewers\":[\"Nick-v-L\"]}"
